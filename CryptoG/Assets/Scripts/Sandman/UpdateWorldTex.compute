// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpTex
#define AIR -1
#define SAND 0

struct blockInfo
{
    int id;
    int lifeTime;
    float velocity;
    float4 col;
    int updated;
};

struct cellInf
{
    int xPos;
    int yPos;
};

RWStructuredBuffer<blockInfo> readBlock, writeBlock;
int sizeX, sizeY;

RWStructuredBuffer<cellInf> location;

int ToOneDi(int i, int j)
{
    int newX = sizeY - 1 - j, newY = i;
    return (sizeX * newX + (newY));
}

int CheckBlockStatus(in blockInfo block) //not modifying anything
{
    int oldVal = -1;
    //InterlockedCompareExchange(block.updated, -1, block.updated, oldVal);

    return oldVal;
}

int SetBlockUpdate(in blockInfo block, in blockInfo setBlock) //modify and lock
{
    int oldVal = CheckBlockStatus(block);

    if (oldVal == 1) {return oldVal;} //already updated
    //InterlockedCompareExchange(block.updated, 0, 1, 101); //set original to random crap

    setBlock = block;
}

[numthreads(16,1,1)]
void UpTex (uint3 id : SV_DispatchThreadID)
{
    int2 pos = int2(location[id.x].xPos, location[id.x].yPos);
    int cur = ToOneDi(pos.x, pos.y);

    blockInfo inf = readBlock[cur];

    if (pos.y == 0 || pos.x == 0 || pos.x == sizeX - 1) {return;} //base level

    //process block
    if (inf.id == AIR)
    {
        writeBlock[cur] = inf;
        //SetBlockUpdate(writeBlock[cur], inf);
    }
    if (inf.id == SAND)
    {
        int left = ToOneDi(pos.x-1, pos.y-1);
        int mid = ToOneDi(pos.x, pos.y-1);
        int right = ToOneDi(pos.x+1, pos.y-1);

        blockInfo leftBlock = readBlock[left];
        blockInfo midBlock = readBlock[mid];
        blockInfo rightBlock = readBlock[right];

        //checking -> double check - buggy - not fixed
        if (midBlock.id == AIR)
        {
            writeBlock[mid] = inf;
            writeBlock[cur] = midBlock;
        }
        else if (leftBlock.id == AIR)
        {
            writeBlock[left] = inf;
            writeBlock[cur] = leftBlock;
        }
        else if (rightBlock.id == AIR)
        {
            writeBlock[right] = inf;
            writeBlock[cur] = rightBlock;
        }
        else
        {
            writeBlock[cur] = inf;
        }
    }
}
